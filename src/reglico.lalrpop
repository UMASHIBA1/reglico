grammar;
use super::ast::{Ident, Opcode, Types, Expr, ExprStmt, CallExpr, Operation, VariableDeclaration, FuncArg,  Func, ReturnStmt, Stmt};

pub Program = {
    Stmt*
}

Stmt: Stmt = {
    ConstAssignment => Stmt::VariableDeclaration(<>),
    ExprStmt => Stmt::ExprStmt(<>),
    ReturnStmt => Stmt::ReturnStmt(<>),
    Func => Stmt::Func(<>)
}

ExprStmt: ExprStmt = {
    <expr: Expr> ";" => ExprStmt::new(expr),
}

ConstAssignment: VariableDeclaration = {
    "const" <ident: IdentExpr> "=" <value: Expr> ";" => VariableDeclaration::new(ident, None, Some(value)),
    "const" <ident: IdentExpr> ":" <type_name: Types> "=" <value: Expr> ";" =>  VariableDeclaration::new(ident, Some(type_name), Some(value)),
}

IdentExpr: Ident = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Ident::new(<>.to_string())
}

Types: Types = {
    "number" => Types::NumberType,
    "bool" => Types::BoolType,
}

Expr: Expr = {
    <left: Expr> <op: Opcode> <right: Factor> => Expr::Op(Operation::new(left, op, right)),
    Factor,
}

Factor: Expr = {
    <left: Factor> <op: FactorOpcode> <right: Term> => Expr::op_new(left, op, right),
    Term
}

FactorOpcode: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
}

Opcode: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
}

Term: Expr = {
    Num => Expr::num_new(<>),
    Bool => Expr::bool_new(<>),
    IdentExpr => Expr::ident_new(<>),
    CallExpr => Expr::Call(<>),
    "(" <Expr> ")",
}

Num: i32 = {
   r"[1-9][0-9]*" => <>.parse().unwrap(),
   r"0" => 0
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

CallExpr: CallExpr = {
    <ident: IdentExpr> "(" <args: CommaSeparate<Expr>> ")" => CallExpr::new(ident, args)
}

Func: Func = {
    "fn" <name: IdentExpr> "(" <args: CommaSeparate<FuncArg>> ")" "{" <stmts: Stmt*> "}" => Func::new(name, args, stmts)
}

FuncArg: FuncArg = {
    <ident: IdentExpr> ":" <arg_type: Types> => FuncArg::new(ident, arg_type),
}

ReturnStmt: ReturnStmt = {
    "return" <expr: Expr> ";" => ReturnStmt::new(expr),
}

CommaSeparate<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

